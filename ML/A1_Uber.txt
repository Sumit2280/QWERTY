import pandas as pd
import numpy as np

df = pd.read_csv('uber.csv')
df

df.head()

df.head(10)

df.tail()

df.tail(10)

df.sample()

df.sample(5)

df.describe()

df.info()

df.columns

df.dtypes

df.shape[0]

df.shape[1]

df.isnull().sum()

df.dropna()

df.isnull().sum()

df.drop(['Unnamed: 0','key'], axis = 1, inplace = True)

//outlier

def remove_outlier(df1 , col):
    Q1 = df1[col].quantile(0.25)
    Q3 = df1[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_whisker = Q1-1.5*IQR
    upper_whisker = Q3+1.5*IQR
    df[col] = np.clip(df1[col] , lower_whisker , upper_whisker)
    return df1

def treat_outliers_all(df1 , col_list):
    for c in col_list:
        df1 = remove_outlier(df , c)
    return df1

treat_outliers_all(df, df.iloc[: , 0::])




x = df.drop(['fare_amount'], axis = 1)
y = df['fare_amount']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.33)



//correlation

df['fare_amount'].corr(df['passenger_count'])

//linear regression

from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(X_train, Y_train)
prediction = reg.predict(X_test)

from sklearn import metrics
metrics.mean_squared_error(y_test, y_pred)

//rmse
np.sqrt(mse)

//r2 score
metrics.r2_score(y_test, y_pred)

//random forest

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(x_train, y_train)
y_pred  = model.predict(x_test)
     
metrics.mean_squared_error(y_test, y_pred)

np.sqrt(mse)

r2_score(y_test, y_pred)


